<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="by.leonovich.hibernatecrm.mappings.singletable">
    <class name="Person" table="T_PERSON" discriminator-value="P">
        <comment>
            SINGLE TABLE or TABLE PER CLASS HIERARCHY.
            Single table will be created for all hierarchy of classes
            with all set of fields from every class in a single table.
        </comment>
        <id name="id" type="java.lang.Long" column="F_ID">
            <generator class="increment"/>
        </id>
        <discriminator column="TYPE"/>
        <property name="name" column="F_NAME" type="string"/>
        <property name="surname" column="F_SURNAME" type="string"/>
        <property name="age" column="F_AGE" type="int"/>
        <one-to-one name="phoneNumber" cascade="all" class="PhoneNumber"/>

        <component name="homeAddress" class="Address">
            <meta attribute="description">
                Component - contained object, which persisted in database as a parameter, not as a separate entity
            </meta>
            <property name="country" column="F_COUNTRY"/>
            <property name="countryCode" column="F_CODE"/>
            <property name="city" column="F_CITY"/>
            <property name="street" column="F_STREET"/>
            <property name="buildingNumber" column="F_BUILDING"/>
            <property name="index" formula="{concat(F_CODE, '_', F_COUNTRY)}" type="java.lang.String" access="field">
                <meta attribute="description">Not a column in database, but calculated by hibernate value</meta>
            </property>
        </component>

        <subclass name="Employee" discriminator-value="E">
            <property name="company" column="F_COMPANY"/>
            <property name="salary" column="F_SALARY" type="big_decimal" precision="19" scale="4"/>
            <!--
            TODO turn lazy="false" to lazy="true" after DAO layer will be rewritten. Cause currently, session is opened-closed
            TODO in DAO, and if try to access meetings collection after session is closed, LazyInitializationException will be thrown
            -->
            <set name="meetings" table="T_EMPLOYEE_MEETING" inverse="false" lazy="false" fetch="select" cascade="save-update">
                <key column="F_EMPLOYEE_ID"/>
                <many-to-many column="F_MEETING_ID" class="Meeting"/>
            </set>
        </subclass>

        <subclass name="Student" discriminator-value="S">
            <property name="faculty" column="F_FACULTY"/>
            <property name="mark" column="F_MARK"/>
            <many-to-one name="university" class="University" fetch="select" column="F_UNIVERSITY_ID" cascade="save-update"/>
        </subclass>
    </class>
</hibernate-mapping>